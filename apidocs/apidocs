#!/bin/bash
set -euo pipefail

# Fusion 360 API Documentation Navigator
# Usage: apidocs [command] [args...]

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
TOCTREE_FILE="$SCRIPT_DIR/toctree.json"
TOCTREE_URL="https://help.autodesk.com/view/fusion360/ENU/data/toctree.json"
BASE_URL="https://help.autodesk.com"
MAX_AGE_DAYS=28

# Node IDs for shortcuts (GUIDs are more stable than human-readable titles)
USER_MANUAL_ID="GUID-C1545D80-D804-4CF3-886D-9B5C54B2D7A2"
OBJECTS_ID="ReferenceManualObjects"

# ============================================================================
# UTILITY FUNCTIONS
# ============================================================================

show_help() {
    cat << EOF
Usage: apidocs [options] [command] [args...]

Navigate Fusion 360 API documentation

Commands:
  (no args)         List all documentation books
  list ID           List children of the specified node
  show ID           Show documentation content for node
  update            Update documentation (always downloads)
  help              Show this help

Shortcuts:
  reference         List API objects (same as: list $OBJECTS_ID)
  manual            List User's Manual (same as: list $USER_MANUAL_ID)

Options:
  -v, --verbose     Show column headers
  --show-urls       Include full URLs in output (default: no URLs shown)
  --language LANG   For 'show' command: filter to python|cpp (default: python)

Output format (tab-separated):
- Default: ID<tab>TITLE
- With --show-urls: ID<tab>TITLE<tab>FULL_URL

Examples:
  apidocs                    # List all documentation books
  apidocs -v                 # List books with column headers
  apidocs reference          # List API objects (first 20)
  apidocs list $OBJECTS_ID  # List all API objects
  apidocs show Design        # Show Design object documentation (Python by default)
  apidocs --language cpp show Design  # Show Design object documentation (C++ examples)
  apidocs update             # Download latest documentation

Note: Documentation auto-downloads if missing or >28 days old
EOF
}

update_documentation() {
    echo "Downloading Fusion 360 API documentation..." >&2

    # Create backup if file exists
    [[ -f "$TOCTREE_FILE" ]] && cp "$TOCTREE_FILE" "$TOCTREE_FILE.bak"

    # Download and verify
    if ! curl -sSL "$TOCTREE_URL" -o "$TOCTREE_FILE.tmp"; then
        echo "Error: Failed to download documentation from $TOCTREE_URL" >&2
        rm -f "$TOCTREE_FILE.tmp"
        exit 1
    fi

    if ! jq empty "$TOCTREE_FILE.tmp"; then
        echo "Error: Downloaded file is not valid JSON" >&2
        rm -f "$TOCTREE_FILE.tmp"
        exit 1
    fi

    mv "$TOCTREE_FILE.tmp" "$TOCTREE_FILE"
    echo "Successfully updated documentation" >&2
}

ensure_documentation() {
    # Auto-update if missing or outdated
    if [[ ! -f "$TOCTREE_FILE" ]] || \
       ! find "$TOCTREE_FILE" -mtime -$MAX_AGE_DAYS -print | grep -q .; then
        update_documentation
    fi
}

find_node_jq() {
    local target_id="$1"
    if ! jq -r --arg id "$target_id" '
        def find_node(id):
            if .id == id then .
            elif .children then .children[] | find_node(id)
            else empty
            end;
        .books[] | find_node($id)
    ' "$TOCTREE_FILE"; then
        echo "Error: jq failed to process toctree file" >&2
        return 1
    fi
}

format_output() {
    local show_urls="${1:-false}"
    local show_headers="${2:-false}"

    if [[ "$show_headers" == true ]]; then
        if [[ "$show_urls" == true ]]; then
            echo -e "ID\tTITLE\tFULL_URL"
        else
            echo -e "ID\tTITLE"
        fi
    fi

    if [[ "$show_urls" == true ]]; then
        # Convert URL fragments to full URLs, pass through already full URLs
        sed "/\thttp/! s|\t/|\t$BASE_URL/|"
    else
        # Strip URL column entirely
        cut -f1,2
    fi
}

show_child_topics() {
    local node_data="$1"

    if echo "$node_data" | jq -e '.children[]?' >/dev/null 2>&1; then
        echo "" >&2
        echo "--- Child Topics ---" >&2
        if ! echo "$node_data" | jq -r '.children[] | [.id // .ttl, .ttl] | @tsv' | while IFS=$'\t' read -r child_id child_title; do
            echo "$child_id	$child_title"
        done; then
            echo "Error: Failed to list child topics" >&2
        fi
    fi
}

# ============================================================================
# COMMAND FUNCTIONS
# ============================================================================

list_books() {
    local show_urls="${1:-false}"
    local show_headers="${2:-false}"

    if ! jq -r '.books[] | [.id // .ttl, .ttl, .ln // ""] | @tsv' "$TOCTREE_FILE"; then
        echo "Error: Failed to parse documentation file" >&2
        exit 1
    fi | format_output "$show_urls" "$show_headers"
}

list_children() {
    local target_id="$1"
    local show_urls="${2:-false}"
    local show_headers="${3:-false}"
    local node_data

    if ! node_data=$(find_node_jq "$target_id"); then
        exit 1
    fi

    if [[ -z "$node_data" ]]; then
        echo "Error: No node found with ID '$target_id'" >&2
        exit 1
    fi

    if ! echo "$node_data" | jq -e '.children[]?' >/dev/null; then
        echo "Error: Node '$target_id' has no children" >&2
        exit 1
    fi

    if ! echo "$node_data" | jq -r '.children[] | [.id // .ttl, .ttl, .ln // ""] | @tsv'; then
        echo "Error: Failed to process node children" >&2
        exit 1
    fi | format_output "$show_urls" "$show_headers"
}

show_content() {
    local target_id="$1"
    local target_language="$2"
    local node_data link

    if ! node_data=$(find_node_jq "$target_id"); then
        exit 1
    fi

    if [[ -z "$node_data" ]]; then
        echo "Error: No node found with ID '$target_id'" >&2
        exit 1
    fi

    if ! link=$(echo "$node_data" | jq -r '.ln // empty'); then
        echo "Error: Failed to extract URL from node data" >&2
        exit 1
    fi

    if [[ -z "$link" ]]; then
        echo "Error: No documentation URL found for ID '$target_id'" >&2
        exit 1
    fi

    local url="$BASE_URL$link"

    echo "Fetching $target_id documentation ($target_language)..." >&2
    echo "" >&2

    python "$SCRIPT_DIR/api_content_extractor.py" "$url" "$target_language" || {
        echo "Error: Failed to fetch documentation via extractor" >&2
        echo "Manual fallback - URL: $url" >&2
        exit 1
    }

    # If the node has children, also show them for navigation
    show_child_topics "$node_data"
}

show_reference() {
    local show_urls="${1:-false}"
    local show_headers="${2:-false}"

    list_children "$OBJECTS_ID" "$show_urls" "$show_headers"
}

show_manual() {
    local show_urls="${1:-false}"
    local show_headers="${2:-false}"

    list_children "$USER_MANUAL_ID" "$show_urls" "$show_headers"
}

# ============================================================================
# MAIN LOGIC
# ============================================================================

# Parse options
show_urls=false
show_headers=false
language="python"

while [[ $# -gt 0 ]]; do
    case "$1" in
        --show-urls)
            show_urls=true
            shift
            ;;
        -v|--verbose)
            show_headers=true
            shift
            ;;
        --language)
            if [[ -n "${2:-}" ]]; then
                case "$2" in
                    python|cpp)
                        language="$2"
                        shift 2
                        ;;
                    *)
                        echo "Error: Invalid language '$2'. Use 'python' or 'cpp', or omit to use python" >&2
                        exit 1
                        ;;
                esac
            else
                echo "Error: --language requires an argument (python|cpp, or omit to use python)" >&2
                exit 1
            fi
            ;;
        help|-h|--help)
            show_help
            exit 0
            ;;
        update)
            update_documentation
            exit 0
            ;;
        -*)
            echo "Error: Unknown option '$1'" >&2
            echo "Use 'apidocs help' for usage information" >&2
            exit 1
            ;;
        *)
            break
            ;;
    esac
done

# Ensure documentation is available for all other commands
ensure_documentation

# Parse and execute commands
case "${1:-}" in
    "")
        list_books "$show_urls" "$show_headers"
        ;;
    "list")
        if [[ -n "${2:-}" ]]; then
            list_children "$2" "$show_urls" "$show_headers"
        else
            echo "Error: list command requires an ID argument" >&2
            echo "Usage: apidocs list ID" >&2
            exit 1
        fi
        ;;
    "show")
        if [[ -n "${2:-}" ]]; then
            show_content "$2" "$language"
        else
            echo "Error: show command requires an ID argument" >&2
            echo "Usage: apidocs show ID" >&2
            exit 1
        fi
        ;;
    "reference")
        show_reference "$show_urls" "$show_headers"
        ;;
    "manual")
        show_manual "$show_urls" "$show_headers"
        ;;
    *)
        echo "Error: Unknown command '$1'" >&2
        echo "Use 'apidocs help' for usage information" >&2
        exit 1
        ;;
esac